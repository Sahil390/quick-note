import { configureStore, createSlice } from "@reduxjs/toolkit"; const notesSlice = createSlice({ name: "notes", initialState: { notes: [], currentNote: null, categories: ["Personal", "Work", "Ideas", "Tasks"], tags: [], }, reducers: { addNote: (state, action) => { state.notes.push({ id: Date.now().toString(), title: action.payload.title || "Untitled Note", content: action.payload.content || "", category: action.payload.category || "Personal", tags: action.payload.tags || [], createdAt: new Date().toISOString(), updatedAt: new Date().toISOString(), }); }, updateNote: (state, action) => { const index = state.notes.findIndex(note => note.id === action.payload.id); if (index !== -1) { state.notes[index] = { ...state.notes[index], ...action.payload, updatedAt: new Date().toISOString(), }; } }, deleteNote: (state, action) => { state.notes = state.notes.filter(note => note.id !== action.payload); }, setCurrentNote: (state, action) => { state.currentNote = action.payload; }, addCategory: (state, action) => { if (!state.categories.includes(action.payload)) { state.categories.push(action.payload); } }, addTag: (state, action) => { if (!state.tags.includes(action.payload)) { state.tags.push(action.payload); } }, }, }); const uiSlice = createSlice({ name: "ui", initialState: { darkMode: false, searchQuery: "", selectedCategory: "all", }, reducers: { toggleDarkMode: (state) => { state.darkMode = !state.darkMode; }, setSearchQuery: (state, action) => { state.searchQuery = action.payload; }, setSelectedCategory: (state, action) => { state.selectedCategory = action.payload; }, }, }); export const { addNote, updateNote, deleteNote, setCurrentNote, addCategory, addTag } = notesSlice.actions; export const { toggleDarkMode, setSearchQuery, setSelectedCategory } = uiSlice.actions; export const store = configureStore({ reducer: { notes: notesSlice.reducer, ui: uiSlice.reducer, }, });
